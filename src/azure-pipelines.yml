# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
#

trigger:
  - master
  - release

pool:
  name: 'CIBG-BuildRelease-O'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'CIBG SonarCloud'
    organization: 'cibg'
    scannerMode: 'MSBuild'
    projectKey: 'MSS.Backend'
    projectName: 'CoronaMelder.Backend'
  condition: and(always(), eq(variables['Build.Reason'], 'Schedule'))

- task: MSBuild@1
  displayName: 'Build solution **\*.sqlproj'
  inputs:
    vsVersion: 16.0
    solution: '**\*.sqlproj'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactstagingdirectory)\Database" /P:PackageTempRootDir="" /p:AutoParameterizationWebConfigConnectionStrings=False'
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    maximumCpuCount: true
    
- task: SonarCloudAnalyze@1
  condition: and(always(), eq(variables['Build.Reason'], 'Schedule'))

- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'
  condition: and(always(), eq(variables['Build.Reason'], 'Schedule'))

- task: CopyFiles@2
  displayName: 'Copy DacPac Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: '**\*.dacpac'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\Database'
    flattenFolders: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Database Artifact:'
  inputs:
    ArtifactName: 'drop'
  condition: not(eq(variables['Build.Reason'], 'PullRequest'))

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

# Execute the publish script
- task: BatchScript@1
  displayName: run build.bat
  inputs:
    filename: src\build.bat
    arguments: $(Build.BuildId)
    workingFolder: '$(Build.SourcesDirectory)\src'
    failOnStandardError: true

- task: replacetokens@3
  inputs:
    rootDirectory: '$(Build.ArtifactStagingDirectory)'
    targetFiles: 'src\package-CIBG.bat'
    workingFolder: '$(Build.SourcesDirectory)\src'
    encoding: 'auto'
    writeBOM: true
    actionOnMissing: 'warn'
    keepToken: false
    tokenPrefix: '#{'
    tokenSuffix: '}#'
    useLegacyPattern: false
    enableTelemetry: true

# Execute the publish script
- task: BatchScript@1
  inputs:
    filename: 'src\package-CIBG.bat'
    workingFolder: '$(Build.ArtifactStagingDirectory)'
    
# Execute the publish script
- task: BatchScript@1
  inputs:
    filename: 'src\copy-CIBG-configs.bat'
    workingFolder: '$(Build.ArtifactStagingDirectory)'

# Save the published files into the artifact repository
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\Artifacts'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  condition: not(eq(variables['Build.Reason'], 'PullRequest'))